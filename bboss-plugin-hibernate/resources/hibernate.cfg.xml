<properties>
	<property name="sessionFactory" factory-bean="localSessionFactoryBean"
		factory-method="buildSessionFactory" />

	<!-- Hibernate SessionFactory -->
	<property name="localSessionFactoryBean"
		class="com.frameworkset.common.poolman.hibernate.LocalSessionFactoryBean">
		<!-- 引用前面定义的数据源 -->
		<property name="dataSource"
			factory-class="com.frameworkset.common.poolman.util.SQLManager"
			factory-method="getDatasourceByDBName">
			<construction>
				<property value="bspf" />
			</construction>
		</property>
		<!-- 所有实体映射文件列表, 所有的 hbm.xml 文件 -->
		<property name="mappingResources">
			<array componentType="String">
				<property
					value="Account.hbm.xml" />
				
			</array>
		</property>
		<!-- 传统上的 hibernate.cfg.xml 文件的参数放在这里 -->
		<property name="hibernateProperties">
			<map componentType="String">
				<!-- 指定数据库方言 -->
				<property name="hibernate.dialect"
					value="hibernate.dialect net.sf.hibernate.dialect.MySQLDialect" />
				<!-- 是否在日志中输出所有Hibernate与数据库交互的SQL语句 -->
				<property name="hibernate.show_sql" value="true" />
				<!-- 是否在日志中输出的SQL 语句格式化成易读形式 -->
				<property name="hibernate.format_sql" value="true" />
				<!-- 是否显示统计形式，一般在测试阶段使用 -->
				<property name="hibernate.generate_statistics" value="true" />
				<!-- 对于级联查询，一次性获取的级联深度， @todo 需进一步研究 -->
				<property name="hibernate.max_fetch_depth" value="2" />
				<!-- Fetch Size 是设定JDBC的Statement读取数据的时候每次从数据库中取出的记录条数，一般设置为30、50、100。 
					Oracle数据库的JDBC驱动默认的Fetch Size=15，设置Fetch Size设置为：30、50，性能会有明显提升，如果继续增大， 超出100，性能提升不明显，反而会消耗内存。 -->
				<property name="hibernate.jdbc.fatch_size" value="100" />
				<!-- 不必等到累计到50个SQL之后才执行.只要事务commit后,不管缓存中有多少条sql语句都要执行. hibernate.jdbc.batch_size参数只是设定一次最多可以提交多少sql语句的上限,提高sql语句的执行效率 -->
				<property name="hibernate.jdbc.batch_size" value="50" />
				<!-- (1)create 在每次SesstionFactory 构建时(一般是应用重启时，或者伴随着应用服务器重启时)，先将之前数据库中的所有数据全 
					部清空，后紧跟着根据所有的hbm.xml 映射文件重新创建新的数据库表 (2)create-drop 除了create 的所有含义之外，在每次应用的退出前，将进行一次数据空清空。因此这个配置将有两次清空操作， 
					一次是退出，一次是启动时。 (3)update 如果在开发阶段理发了实体对象的映射文件(hbm.xml) 的定义后，此配置将后台的数据库表进行更新(如增加表的列) 
					(4)validate 用于校验现有的表与现有的配置是否一致。 -->
				<property name="hibernate.hbm2ddl.auto" value="update" />
				<!-- 见下面的解释 -->
				<property name="hibernate.hbm2ddl.auto" value="update" />
				<!--结果缓存配置：- 将ehcache.xml 置于 classpath 中- 如果不设置“查询缓存”， 那么hibernate只会缓存使用load()方法获得的单个持久化对象，如果想缓存使用findall()、 
					list()、 Iterator()、createCriteria()、createQuery()等方法获得的数据结果集的话，就需要设置 hibernate.cache.use_query_cache 
					true 才行- 在Hbm文件中添加<cache usage="read-only"/>- 如果需要“查询缓存”，还需要在使用Query或Criteria()时设置其setCacheable(true);属性 -->
				<property name="hibernate.cache.use_query_cache" value="true" />
				<property name="hibernate.cache.provider_class" value="org.hibernate.cache.EhCacheProvider" />
			</map>
		</property>

	</property>
</properties>